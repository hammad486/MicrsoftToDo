@page "/"
@using System.Linq
@using MicrsoftToDo.Models
@using MicrsoftToDo.Service
@inject TodoService TodoService

<div class="col-md-12">
<div class="col-md-3">

</div>
<div>
        <div class="row mt-3 ">
            <div class="col-md-10">
                <h3 class="w-100">My Todo</h3>
            </div>
            <div class="col-md-2">
                <button class="btn-sm btn btn-info text-light">Add Todo</button>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3">
                <input @bind="newTodoTitle" placeholder="Search Task" />
            </div>
            <div class="col-md-3">
               
            </div>
            <div class="col-md-3">
                <input type="datetime-local" @bind="newTodoStartDate" />
            </div>
            <div class="col-md-3">
                <input type="datetime-local" @bind="newTodoDueDate" />
            </div>
        </div>

        <br />
        <br />

<ul>
    @if (Todos != null && Todos.Any())
    {
        @foreach (var todo in Todos)
        {
            var isDueSoon = !todo.IsCompleted && todo.DueDate < DateTime.Now.AddDays(1);
            var taskStyle = isDueSoon ? "background-color: red;" : "";
            var taskClass = todo.IsCompleted ? "completed-task" : "";
          
             <div class="card">
                <div class="card-header">
                    <div class="row">
                    <div class="col-md-3">
                                    <h4 style="text-decoration: @(todo.IsCompleted ? "line-through" : "none");">
                                        <input class="ml-2 mr-2" type="checkbox" @checked="@todo.IsCompleted" style="margin-right: 5px;" />
                                        @todo.Title
                                    </h4>
                                </div>
                    <div class="col-md-3">
                                @if (@todo.IsCompleted == false)
                                {
                                        <p style="color:black;">
                                            <strong>InProgress:</strong>
                                            <!-- Circle before the text -->
                                            <span class="inprogress-circle"></span>
                                        </p>

                                        <style>
                                            .inprogress-circle {
                                                display: inline-block;
                                                width: 15px; /* Circle size */
                                                height: 15px;
                                                background-color: yellow; /* Circle color */
                                                border-radius: 50%; /* Make it a circle */
                                                margin-left: 5px; /* Space between text and circle */
                                                vertical-align: middle; /* Align circle with text */
                                            }
                                        </style>
                                }
                                else
                                {
                                    <p style="color:forestgreen"><strong>Completed:</strong></p>
                                }
                    </div>
                </div>
                </div>
                          
                   
                
                        <div class="separator"></div> <!-- Yellow thick line -->
                    </div>

        }
    }
    else
    {
        <li>No tasks available.</li>
    }
</ul>
 </div>
</div>


@code {
    private List<TodoItem> Todos;
    private string newTodoTitle;
    private DateTime newTodoStartDate = DateTime.Now;
    private DateTime newTodoDueDate = DateTime.Now.AddDays(1);
    private int? editTodoId;
    private string editTodoTitle;

    protected override async Task OnInitializedAsync()
    {
        Todos = await TodoService.GetTodosAsync();
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle))
        {
            var todo = new TodoItem
            {
                Title = newTodoTitle,
                StartDate = newTodoStartDate,
                DueDate = newTodoDueDate,
                IsCompleted = false
            };

            await TodoService.AddTodoAsync(todo);
            Todos = await TodoService.GetTodosAsync();  // Re-fetch the list
            newTodoTitle = string.Empty;
        }
    }

    private async Task DeleteTodo(int id)
    {
        await TodoService.DeleteTodoAsync(id);
        Todos = await TodoService.GetTodosAsync();  // Re-fetch the list
    }

    private void StartEdit(int id, string title)
    {
        editTodoId = id;
        editTodoTitle = title;
    }

    private async Task UpdateTodoCompletion(int id)
    {
        var todo = Todos.FirstOrDefault(t => t.Id == id);
        if (todo != null)
        {
            todo.IsCompleted = !todo.IsCompleted;
            await TodoService.UpdateTodoAsync(todo);
            Todos = await TodoService.GetTodosAsync();  // Re-fetch the list
        }
    }

    private async Task UpdateTodo(int id)
    {
        var todo = Todos.FirstOrDefault(t => t.Id == id);
        if (todo != null && !string.IsNullOrWhiteSpace(editTodoTitle))
        {
            todo.Title = editTodoTitle;
            await TodoService.UpdateTodoAsync(todo);
            Todos = await TodoService.GetTodosAsync();  // Re-fetch the list
            CancelEdit();
        }
    }

    private void CancelEdit()
    {
        editTodoId = null;
        editTodoTitle = string.Empty;
    }
}
