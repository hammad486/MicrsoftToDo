@page "/"
@using System.Linq
@using MicrsoftToDo.Models
@using MicrsoftToDo.Service
@inject TodoService TodoService

<div class="col-md-12">
    <div class="col-md-3">
    
    </div>
    <div>
        <div class="row mt-3 ">
            <div class="col-md-10">
                <h3 class="w-100">My Todo</h3>
            </div>
            <div class="col-md-2">
                <button class="btn-sm btn btn-info text-light" @onclick="()=>OpenModal()">Add Todo</button>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-3">
                <input @bind="newTodoTitle" placeholder="Search Task" />
            </div>
            <div class="col-md-3">

            </div>
            <div class="col-md-3">
                <input type="datetime-local" @bind="newTodoStartDate" />
            </div>
            <div class="col-md-3">
                <input type="datetime-local" @bind="newTodoDueDate" />
            </div>
        </div>
        <br />
        <br />
        @foreach (var todo in Todos)
        {
            <div class="card pb-2">
                <div class="card-header">
                    <div class="row">
                        <div class="col-md-3">
                            <h5 style="text-decoration: @(todo.IsCompleted ? "line-through" : "none");">
                                <input  class="ml-2 mr-2" type="checkbox" @checked="todo.IsCompleted" style="margin-right: 5px;" />
                                @todo.Title
                            </h5>
                        </div>
                        <div class="col-md-3">
                            @if (@todo.IsCompleted == false)
                            {
                                <p style="color:black;">
                                    <strong>InProgress:</strong>
                                    <!-- Circle before the text -->
                                    <span class="inprogress-circle"></span>
                                </p>

                                <style>
                                    .inprogress-circle {
                                    display: inline-block;
                                    width: 15px; /* Circle size */
                                    height: 15px;
                                    background-color: yellow; /* Circle color */
                                    border-radius: 50%; /* Make it a circle */
                                    margin-left: 5px; /* Space between text and circle */
                                    vertical-align: middle; /* Align circle with text */
                                    }
                                </style>
                            }
                            else
                            {
                                <p style="color:black;">
                                    <strong>Completed:</strong>
                                    <!-- Circle before the text -->
                                    <span class="circle"></span>
                                </p>
                                <style>
                                    .circle {
                                    display: inline-block;
                                    width: 15px; /* Circle size */
                                    height: 15px;
                                    background-color: green; /* Circle color */
                                    border-radius: 50%; /* Make it a circle */
                                    margin-left: 5px; /* Space between text and circle */
                                    vertical-align: middle; /* Align circle with text */
                                    }
                                </style>
                            }
                        </div>
                        <div class="col-md-3">
                            <div class="row">
                                <div class="col-md-5">
                                    <p><span>@todo.StartDate.ToString("yyyy-MM-dd")</span></p>
                                </div>
                                <div class="col-md-2">

                                </div>
                                <div class="col-md-5">
                                    <p><span>@todo.DueDate.ToString("yyyy-MM-dd")</span></p>
                                </div>                          
                            </div>             
                        </div>
                        <div class="col-md-3">
                            <div style="margin-left:40px;" class="icon-container">
                                <!-- Edit Icon -->
                                <button @onclick="()=>UpdateTodoCompletion(todo.Id)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>

                                <!-- Delete Icon -->
                                <button @onclick="()=>DeleteTodo(todo.Id)">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </div>
                            <style>
                                .icon-container button {
                                    background-color: transparent;
                                    border: none;
                                    font-size: 13px;
                                    cursor: pointer;
                                    margin: 4px;
                                }

                                    .icon-container button:hover {
                                        color: #007bff;
                                    }
                            </style>
                        </div>
                    </div>
                </div>
            </div>
        }
        <br/>
    </div>
</div>


@if (isModalVisible)
{
    <div class="modal-overlay">
        <div class="modali">
            <h3>Add Todo</h3>
            <EditForm Model="Todoos" >
                <div class="form-group">
                    <label for="name">Title</label>
                    <InputText id="name" class="form-control" @bind-Value="Todoos.Title" />
                </div>
                <div class="form-group">
                    <label for="DueDate">Due Date</label>
                    <InputDate id="name" class="form-control" @bind-Value="Todoos.DueDate" />
                </div>
                <button type="submit" class="btn btn-success" @onclick="()=>AddTodo(Todoos)">Submit</button>
                <button type="button" class="btn btn-secondary" @onclick="()=>CloseModal()">Close</button>
            </EditForm>
        </div>
        <style>
            .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            }

            .modali {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            width: 400px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

            button {
            margin-top: 10px;
            }
        </style>
    </div>
}

@code {
    private List<TodoItem> Todos= new List<TodoItem>();
    private TodoItem Todoos = new TodoItem();
    private bool isModalVisible = false;
    private string newTodoTitle;
    private DateTime newTodoStartDate = DateTime.Now;
    private DateTime newTodoDueDate = DateTime.Now.AddDays(1);
    private int? editTodoId;
    private string editTodoTitle;

    protected override async Task OnInitializedAsync()
    {
        Todos = await TodoService.GetTodosAsync();
    }


    private void OpenModal()
    {
     
        isModalVisible = true;  
    }
    private async Task AddTodo(TodoItem model)
    {
        var todo = new TodoItem
            {
                Title = model.Title,
                StartDate = DateTime.UtcNow,
                DueDate = model.DueDate,
                IsCompleted = false
            };

        await TodoService.AddTodoAsync(todo);
        Todos = await TodoService.GetTodosAsync();  // Re-fetch the list
        isModalVisible = false;

    }

    private async Task DeleteTodo(int id)
    {
        await TodoService.DeleteTodoAsync(id);
        Todos = await TodoService.GetTodosAsync();  // Re-fetch the list
    }

    private void StartEdit(int id, string title)
    {
        editTodoId = id;
        editTodoTitle = title;
    }

    private async Task UpdateTodoCompletion(int id)
    {
        var todo = Todos.FirstOrDefault(t => t.Id == id);
        if (todo != null)
        {
            todo.IsCompleted = !todo.IsCompleted;
            await TodoService.UpdateTodoAsync(todo);
            Todos = await TodoService.GetTodosAsync();  // Re-fetch the list
        }
    }

    private async Task UpdateTodo(int id)
    {
        var todo = Todos.FirstOrDefault(t => t.Id == id);
        if (todo != null && !string.IsNullOrWhiteSpace(editTodoTitle))
        {
            todo.Title = editTodoTitle;
            await TodoService.UpdateTodoAsync(todo);
            Todos = await TodoService.GetTodosAsync();  // Re-fetch the list
            CancelEdit();
        }
    }

    private void CancelEdit()
    {
        editTodoId = null;
        editTodoTitle = string.Empty;
    }

    public void CloseModal()
    {
        isModalVisible = false;
    }
}
